@using Todo.Controllers
@using Todo.Data.Entities
@using Todo.Services
@model Todo.Models.TodoLists.TodoListDetailViewmodel

@{
    ViewData["Title"] = $"List: {Model.Title}";

    // Yes, I absolutely used StackOverflow here.
    // https://stackoverflow.com/a/48251637
    bool isOrderedByRank()
    {
        Microsoft.Extensions.Primitives.StringValues queryVal;
        return (Context.Request.Query.TryGetValue("order", out queryVal) && queryVal.FirstOrDefault() == "rank");
    }

    string thisURL()
    {
        string querystring = Context.Request.QueryString.Value;
        return Context.Request.Path.Value + querystring;
    }

    // I'm sure there's a better, more idiomatic method of doing this. I'm not a C# dev. Yet.
    var items = Model.Items.ToArray();

    // Use Array sort method to sort items
    if (isOrderedByRank())
    {
        Array.Sort(items, (x, y) => y.Rank.CompareTo(x.Rank));
    }
    else
    {
        Array.Sort(items, (x, y) => x.Importance.CompareTo(y.Importance));
    }

}

<h2>@ViewData["Title"]</h2>

<div class="col-md-6">

    <ul class="list-group">

        <li class="list-group-item">
            <a asp-action="Create" asp-controller="TodoItem" asp-route-todoListId="@Model.TodoListId">
                <strong>Add New Item</strong>
            </a>
        </li>

        @foreach (var item in items)
        {
            string contextualClass;
            switch (item.Importance)
            {
                case Importance.High:
                    contextualClass = "list-group-item-danger";
                    break;
                case Importance.Low:
                    contextualClass = "list-group-item-info";
                    break;
                default:
                    contextualClass = "";
                    break;
            }
            if (item.IsDone)
            {
                contextualClass += " done";
            }

            <li class="list-group-item @contextualClass">

                <div class="row">

                    <div class="col-md-8">
                        <a asp-action="Edit" asp-controller="TodoItem" asp-route-todoItemId="@item.TodoItemId">

                            @if (item.IsDone)
                            {
                                <s>@item.Title</s>
                                <s>@item.Rank</s>
                            }
                            else
                            {
                                <text>@item.Title</text>
                                <text>@item.Rank</text>
                            }
                        </a>
                        @if (item.IsDone)
                        {
                            <span class="glyphicon glyphicon-remove" aria-hidden="true"></span>
                        }
                    </div>

                    <div class="col-md-4 text-right">
                        <small>
                            <div class='userIdentity'>@item.ResponsibleParty.UserName</div>

                            <img
                            src="https://www.gravatar.com/avatar/@Gravatar.GetHash(item.ResponsibleParty.Email)?s=30" />

                        </small>
                    </div>
                </div>

            </li>
        }
        <li class="list-group-item">
            <button class="btn-sm"
                onclick='Array.from(document.getElementsByClassName("done")).forEach((e) => e.classList.add("hidden"));'>Hide
                all Done</button>
            @if (!isOrderedByRank())
            {
                <button class="btn-sm"><a href="@thisURL()&order=rank">Sort by Rank</a></button>
            }
        </li>
    </ul>
</div>

<!-- TODO: Add an event listener which fires up. -->
<script>
    document.addEventListener('DOMContentLoaded', function () {
        console.log(gravatarhash);
        fetch('https://www.gravatar.com/' + gravatarhash + '.json')
            .then(function (response) {
                console.log(response.body);
                return response.json();
            })
            .then(function (myJson) {
                console.log(myJson);
            });
    });
</script>